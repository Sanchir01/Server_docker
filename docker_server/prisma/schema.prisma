generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  name       String
  password   String
  email      String    @unique
  phone      String    @unique
  avatarPath String
  isAdmin    Boolean   @map("is_admin")
  orders     Order[]
  favorites  Product[]
  reviews    Review[]
}

model Product {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  name           String
  slug           String
  description    String
  price          Int
  images         String[]
  categoryId     Int?          @map("category_id")
  userId         Int?
  seller         Boolean       @default(false)
  newProduct     Boolean       @default(false)
  insulationId   Int?
  productColorId Int?
  orderItems     OrderItem[]
  category       Category?     @relation(fields: [categoryId], references: [id])
  Insulation     Insulation?   @relation(fields: [insulationId], references: [id])
  ProductColor   ProductColor? @relation(fields: [productColorId], references: [id])
  User           User?         @relation(fields: [userId], references: [id])
  reviews        Review[]
  colors         Color[]       @relation("ProductColors")
  size           Size[]        @relation("ProductSizes")
}

model Size {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  slug      String    @unique
  products  Product[] @relation("ProductSizes")
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  image     String
  slug      String    @unique
  Product   Product[]
}

model Color {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  slug      String    @unique
  imageCss  String    @unique
  products  Product[] @relation("ProductColors")
}

model Insulation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  slug      String    @unique
  products  Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int
  text      String
  productId Int?
  userId    Int?     @map("user_id")
  product   Product? @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model ProductColor {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  slug      String    @unique
  Product   Product[]
}

model Order {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  status    EnumOrderStatus @default(PENDING)
  userId    Int?            @map("user_id")
  user      User?           @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  quantity  Int
  price     Int
  orderId   Int?     @map("order_id")
  productId Int?     @map("product_id")
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
